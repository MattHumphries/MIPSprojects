# Lab 5 Matt Humphries
# March 08 2018
# CSC 311 Computer Organization and Software Interface

	.data	# Data declaration section
	
	SystemPrompt:   .asciiz 		 "\nThis program will take an encoded string you enter,
						  \ndecode that string and then return the ASCII result
						  \nYou must enter a string with a length that is a multiple of 4
						  \n\n"
	BlankLine:	.asciiz 		 "\n" 
	Prompt1:	.asciiz 		 "Please enter a string of encoded data that you wish to be decoded: \n\n" 
	Prompt2:	.asciiz 		 "\nThe Base 64 encoded input data was: "
	Prompt3:	.asciiz 		 "\nThe decoded ASCII result is: "
	
	CharSet:	.asciiz 		 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
	Bye: 	    .asciiz 			 "\n\n Goodbye. "
	Error:      .asciiz 			 "\nInvalid character in string.\n"
	NotAMul:	.asciiz 		 "\nThe bit string you entered is not a multiple of 4, please try again\n\n"
	
	.globl	main
	.text

main:						# Start of code section
	
	li $v0, 4
	la $a0, SystemPrompt    		# Tells the user what the program does.
	syscall
		
	la	$s0,	CharSet			# Load the CharSet  & allocate 80 bytes for input string and get data from user.
	la	$a0,	Prompt1 		# Prompt for and read input string
	jal	ReadString	
	move $s1, $v0	
	move $s2, $v0	
	
	li $v0, 9       			# System call to allocate heap memory 
	li $a0, 80      			# Allocate 80 bytes for output string
	syscall
	move $s3, $v0   	
	move $s4, $v0   
	
	lb	$t0,0($s2) 			# Get first byte	
	beq	$t0,10,	End			# End program on newline
	
	move $a0, $s2
	jal Length
	li	$t0, 4
	div $v0, $t0
	mfhi	$t0 				# Make sure the input string length is a multiple of 4
	bgtz $t0, NotMult
	
	li	$v0, 4
	la	$a0, Prompt2 			# Display input string and message
	syscall	
	li	$v0, 4
	move $a0, $s2
	syscall
	
	li	$v0, 4
	la	$a0, Prompt3 			# Display output message
	syscall

	move $a1, $s0				# Load the character set		
	move $a0, $s2				# Input the input string		
	jal	Decode				# Decode the string and print it	
	
	b	End				# Branch to End
	
Print:		
	li $v0, 4
	move $a0, $s3
	syscall	
	
	li	$v0, 4
	la	$a0, BlankLine
	syscall
	b	main
		
Decode:		
		
	move $a1, $s0				# Load the fixed character set
	lb	$a0, 0($s2) 			# Get first byte	
		
	beq	$a0, 10, Print			# Loop until user presses enter
	
	la $t3, FindChar	
	jalr $t2, $t3   			# Locate the character
	move $t4, $v0				# Save the first byte character to $t4
	
	move $a1, $s0				# Reload the character set
	lb $a0, 1($s2)  			# Get second byte	
	la $t3, FindChar	
	jalr $t2, $t3   			# Locate the character
	move $t5, $v0				# Save the second byte character to $t5

	move $a1, $s0				# Reload the character set
	lb	$a0, 2($s2) 			# Get third byte	
	la $t3, FindChar	
	jalr $t2, $t3  				# Locate the character
	move $t6, $v0				# Save the third byte character to $t6
	
	move $a1, $s0				# Reload the character set
	lb	$a0, 3($s2) 			# Get fourth byte	
	la $t3, FindChar	
	jalr $t2, $t3   			# Locate the character
	move $t7, $v0				# Save the fourth byte character to $t7
		
	move $t1, $t5				# Backup the second byte
	sll  $t4, $t4,2 			# First byte	
	srl	$t5, $t5, 4 			# Second byte
	or	$t0, $t4,$t5			# Combine to make new byte
	sb	$t0, 0($s4)			# Add to string

	move $t2, $t6				# Backup the third byte
	sll $t1, $t1, 4 			# Second byte	
	srl	$t6, $t6, 2 			# Third byte
	or	$t0, $t1, $t6			# Combine to make new byte
	sb	$t0, 1($s4) 			# Add to string
	
	sll $t2, $t2, 6 			# Third byte
	or	$t0, $t2, $t7 			# Combine to make new byte
	sb	$t0, 2($s4) 			# Add to string
		
	addi $s4, $s4, 3			# Move over 3 bytes in output
	addi $s2, $s2, 4			# Move over 4 bytes in input string
	
	b	Decode						
	
FindChar: 
	
	li	$t0,0  				# Loop counter	($a0 holds value to find, $a1 is the fixed set, 
						# $t0 is the counter, $t1 is the current character)
	
	b	FindChar1	
	
FindChar1:	
		
	bgt	$t0, 63	InvalidChar		# Make sure it is a valid character
		
	lb	$t1, 0($a1)			# The current character in the character set is in $t1
	beq	$a0, $t1 ReturnChar		# When the character is found, add it to the output string
	addi $t0, $t0, 1 			# Increment loop counter
	addi $a1, $a1, 1 			# Move to next character 
	b	FindChar1 			# loop
	
InvalidChar:
	
	li	$v0, 4
	la	$a0, Error			# Print error message due to invalid character 
	syscall
	b	main

ReturnChar:
	
	move $v0, $t0 				# Return the counter value
		
	jr $t2		  			# Return to location saved in $t2
	
NotMult:	
	
	li	$v0, 4
	la	$a0, NotAMul 			# Gives error message for invalid string (because not multiple of 4)
	syscall
	b	main
		
Length: 
	
	li	$v0, -1    			# Set counter to -1 before calling Length2
	b Length2
	
Length2:
	
	lb $t2, 0($a0)  
	beqz $t2, Repeat   
	addi $a0, $a0, 1       
	addi $v0, $v0, 1 
	b Length2      				# Finally loop  	
		
ReadString:	

	li	$v0, 4	
	syscall			
	li $v0, 9       			# System call to allocate dynamically 80 bytes
	li $a0, 80      
	syscall
	move $a0, $v0   		
	li $v0, 8 		  
	li $a1, 80				# Max characters to read
	syscall
			
	move $v0, $a0 	
	jr $ra		
	
Repeat:		
	jr $ra		

End:	
	li	$v0, 4	
	la	$a0, Bye	
	syscall					# Print goodbye message
	li	$v0, 10	
	syscall		
# END OF PROGRAM
